version: "3.8"

services:
  backend:
    build:
      context: ./backend
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      FRONTEND_URL: "http://frontend:80"
      RABBITMQ_URL: "amqp://rabbitmq:5672"
    ports:
      - "8080:8080"
    depends_on:
      - db
      - rabbitmq
    networks:
      - app-network

  pinger:
    build:
      context: ./pinger
    environment:
      # http://backend:8080/containers
      BACKEND_NAME: backend
      BACKEND_PORT: 8080
      BACKEND_ROUTE: containers
      RABBITMQ_URL: "amqp://rabbitmq:5672"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9090:9090"
    depends_on:
      - backend
      - rabbitmq
    networks:
      - app-network

  db:
    build:
      context: ./database
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend/docker-monitoring-frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_BACKEND_URL=http://backend:8080
    environment:
      - REACT_APP_BACKEND_URL=http://backend:8080
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network

  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "15672:15672"  # порты для доступа к менеджменту RabbitMQ
      - "5672:5672"    # основной порт для очередей
    networks:
      - app-network

networks:
  app-network:
    name: app-network
